01:angular特性：
 	MVC模式
 	模块系统
 	指令系统
 	依赖注入
 	双向数据绑定
angular中，所有数据必须要挂载到$scope上
$scope作用域在在函数内部 局部作用域
$rootScope在angular下算是全局作用域
$scope.xx首先会在它所属的局部作用域中查找，如果局部有的话就是局部，否则走全局（就近查找）

02:依赖注入：
angular中形参是不能被修改的,一旦被修改angular就不知道你的形参要做什么事，不知道你想使用什么样的功能。

调用的方式在angular内部进行的函数调用，在内部调用时，参数已经帮我们自动的依赖注入进去！
如何能得到自己想要的参数根据自己写的形参决定：
	形参：$scope:->注入了一个局部作用域的对象
	形参：$rootScope->注入了一个全局的对象
	
注入的这些形参另称服务：以$开头+一个名字，来实现一些特有的功能！


03:指令系统： ng- 指令 ->完成一些功能的，和服务类似
	ng-app:初始化指令 
	ng-controller：控制器c，连接视图view和数据module的桥梁
	ng-click:点击指令
	ng-mouseover:
	ng-mousedown:
	v影响m:ng-model:->input text
	ng-repeat:遍历集合 针对的是数组
	

04:双向数据绑定：
	01：MVVM->m数据发生改变会自动的改变view视图，并且视图发生改变也会影响到数据
	02：$timeout:angular中当数据发生改变回自动刷新视图层的数据类似于原生js中的setTimeout,但是原生js在angular中不具备刷新视图层的功能！前提需要把$timeout作为服务注入进去！
	$timeout(function(){
		$scope.name = "hi";
	},2000);
	

05:过滤器：
	currency:货币格式化 默认$ 修改的话：currency:'￥'

06:监听：
	$watch:监听数据变化，挂载到$scope下 三个参数 只能监听一个单值的变化。如果第三个参数为true的话就可以监听整个对象
	$scope.$watch(监听对象,function(newVal,oldVal){},针对集合监听(true/false));

$scope.$apply->将原生js下可以直接拿来用
function Aaa($scope){
	$scope.name = "hello";
	setTimeout(function(){
		$scope.$apply(function(){
			$scope.name = "hi";
		});
	},2000);
}


07:模块化：减少变量之间的污染和命名的冲突
	angular.module()->创建模块 参数1：模块名字myApp 参数2：数组['当前模块要依赖的其他模块']
	并且ng-app要从新指定下从哪个模块开始初始化
	var m = angular.module('myApp',[]);->[]引入angluar的外部其他模块
	m.controller('Aaa',['$scope',function($scope){
		$scope.name = "hello";
	}]);
	

08：angularJs的工具方法：
	01:angular.bind->修改this指向
	function show(){
		alert(this);
	}
	//show()//->window
	angular.bind(document,show)();//html
	
	
	02:angular.copy->拷贝对象
	
	03:angular.extend->对象的继承操作
	
	04:angular.isArray
	05:angular.isDate
	06:angular.isDefined
	07:angular.isUndefined
	08:angular.isFunciton
	09:angular.isNumber
	10:angular.isObject
	11:angular.isString
	12:angular.isElement
	13:angular.version
	14:angular.equals:判断两个元素是否相等 angular中两个NaN判断为true
		AngularJs中的angular.equals()方法用于比较两个对象、值或表达式是否相等。AngularJs文档中对equals方法比较的原则是这样描述的：
		（1）比较的两个对象或值能够通过 === 表达式。===要求两个值不仅值相同，类型也要相同，也就是说，1 === “1”是不成立
	的。
		（2）比较的两个对象或值是相同类型的，而且它们所有的属性通过angular.equals()方法判断都是相等的。
		（3）两个值都为（NaN）。（在Javascript中认为NaN == NaN是false）
		（4）两个值代表字面上相等的表达式，如两个正则表达式：/abc/与/abc/是相等的。
	15:angular.forEach;
	16:angular.fromJson/toJson
		angular.fromJson->str->json
		angular.toJson->json->str
	17:angular.identity/noop:辅助作用 进行默认操作
		angular.identity:参数传递的是什么，最终计算的结果就是这个参数
		angular.noop:undefined 
	18:angular.lowercase/uppercase
	19:angular.element->获取到一个元素并进行后续操作 ->类似于jq的方法
	angular.bootstrap：一个页面向进行多次初始化调用时可以使用，指令下只能进行一次
	document.onclick = function(){
		var aDiv = document.getElementsByTagName("div");
		angular.bootstrap(aDiv[0],['myApp']);
		angular.bootstrap(aDiv[1],['myApp']);
	}
		


09：过滤器：
	<p>{{name | currency : '￥'}}</p>
	1：currenty:货币金额
	2：number:->把数字转成文本格式,遇到小数会自动截取保留三位
	<p>{{number | number : 2}}</p> ->保留两位
	3：lowercase/uppercase
	
	4：json->格式化json 放入到pre标签中
	{
	  "name": "hello",
	  "age": "20"
	}
	
	5：limitTo:截取的操作 <p>{{name | limitTo:2}}</p> 后面参数截取位数 支持str array
	
	6:date:->针对时间的 将毫秒格式化为年份 时间 月份
	
	7:orderBy:排序 针对数组 通过$filter的话
	$filter('orderBy')(sortName,arg,true)-->第三个参数：true：大到小  false->从小到大
	
	filter:
	<p>{{name | limitTo:2 | uppercase}}</p>多个组合
	
	js中使用过滤器：
		以服务的方式注入$filter
		var m = angluar.moudle('myApp',[]);
		m.controller('Aaa',['$scope','$filter',function($scope,$filter){
			$scope.name = $filter('limitTo')('hello',2);
		}]);
		
	自定义过滤器：运用模块下面的一个方法，filter 采用return的方式 
		view层：{{name | diyFilterName}}
		view层：{{name | diyFilterName:参数}}
		module层：采用angular.module模块下的filter方法
		var m = angular.moudle('myApp',[]);
		控制层：
		m.controller('Aaa',['$scope','$filter',function($scope,$filter){
			$scope.name = $filter(diyFilterName)('hello');
		}]);
		m.filter(diyFilterName,function(){
			//第一种没参数:
			return function(str){
				//console.log(str)//name
				return str.charAt(0).toUpperCase() + str.substring(1);
			}
			//第二种传参数情况下：
			return function(str,num){
				return str.charAt(0).toUpperCase() + str.substring(1);
			}
		});
		
			
		

10:指令：ng-repeat:遍历集合
	扩展：
		$index:得到遍历的索引值
		$first:集合的第一项返回真，其余返回false
		$last:集合最后一项返回true，其余返回false
		$middle:除了首项和尾项返回false其余都返回真
		$even:奇数行返回true,偶数行返回false
		$odd:偶数行返回true,奇数行返回false
		ng-repeat-start:实现兄弟之间的循环操作
		ng-repeat-end


11:事件指令：
	ng-click/dbclick
	ng-mousedown/up
	ng-mouseenter/leave
	ng-mousemove/over/out
	ng-keydown/up/press
	ng-focus/blur
	ng-submit	
	ng-selected
	ng-change
	ng-copy
	ng-cut
	ng-paste	


12:input相关指令：
	01:ng-disabled:让一些按钮或者输入框禁用的状态
	02:ng-readonly
	03:ng-checked
	04:ng-value:input里的value的操作 ng-value和原生value
	05:ng-bind:页面显示的优化处理->只支持一个表达式
		<div>{{name}}</div><==><div ng-bind="name"></div>
	06:ng-bind-template:多个表达式的页面优化处理
		<div ng-bind-template="{{text}},{{text}}"></div>
	07:ng-bind-html:会把服务里面的带有标签元素的数据解析到页面中，而不是带标签的输入到页面,外部引入插件
	<script src="https://cdn.bootcss.com/angular.js/1.5.8/angular-sanitize.min.js" type="text/javascript" charset="utf-8"></script>
	然后将这个模块引入到当前angular的模块下->var m = angular.module('myApp',['ngSanitize']);
	
	08:ng-cloak:控制css的一种方式，加上这个指令就是将display:none;当表达式解析完毕，block显示出来
		<div ng-cloak>{{text}}</div>
			1:默认display:none;
			2:解析完毕：display:block;
			
	09:ng-non-bindable:不去对表达式进行解析
	
		
定时器注入服务$interval $timeout
var timer = $interval(function(){
	xxx;
	$interval.cancel(timer)->清除定时器
},1000);





13:样式相关指令：
	ng-class:页面添加class
	ng-style：通过指令的方式书写行间样式
	ng-href
	ng-src
	ng-attr-(suffix):通用的写法
		ng-attr-href /ng-attr-title /ng-attr-class/ng-attr-style...
	
	<div ng-class="{red:true,yellow:true}">{{text}}</div>->动态来改变两个class的布尔值就可以控制class的添加和删除
	<div ng-style="{color:'red',background:'yellow'}">{{text}}</div>
	另一种方式：
	var m = angular.module('myApp',[]);
	m.controller('Aaa',['$scope',function($scope){
		$scope.text = "hello";
		$scope.sClass = "{red:true,yellow:true}";
		$scope.style="{color:'red',background:'yellow'}";
	}]);
	<div ng-class="{{sClass}}">{{text}}</div>
	<div ng-style="{{style}}">{{text}}</div>
	

14:DOM操作相关指令：
	ng-show:显示元素   
	ng-hide:隐藏元素 通过css中的display把它隐藏
	ng-if:把这个dom节点真正移除/添加 true:添加 false:删除
	ng-switch:有选择性的显示和隐藏的切换
		on
		default
		when
	ng-open:
	
		<div ng-show="true">aaaaaa</div>->显示
		<div ng-show="false">aaaaaa</div>->隐藏
		
	ng-init:初始化数据的指令
	ng-include:包含模版或者一段代码引入到页面
	ng-model:
		ng-model-options:->自己选择不同的方式：{updateOn:'blur'}
		<input type="text" ng-model="text" ng-model-options="{updateOn:'blur'}" />
		
	ng-controller:连接数据和视图的桥梁 支持面向对象的一种操作方式
		as:创建一个对象出来
		//修改成opp module层：
		var m = angular.module('myApp',[]);
		m.controller('Aaa',['$scope',FnAaa]);
		//构造函数
		function FnAaa($scope){}
		FnAaa.prototype.num = '123';
		FnAaa.prototype.text = 'hello';
		FnAaa.prototype.show = function(){
			return 'angularJs';
		}
		view层：
		<!-- a1其实是构造函数创建出来的一个对象 -->
		<div ng-controller="FnAaa as a1">
			<div>{{a1.text}}:{{a1.show()}}</div>
		</div>
		

15：标签指令详解：重点用在表单验证中
	之前的为属性指令
	标签指令：对原有的html中的一些标签进行了重新的构建产生了一个新的功能的标签，就是在原来的老标签上进行了升级
	<a>：angular下的a标签回阻止默认行为。普通的不会
	<select>
		ng-options
			for in
	<textarea>
	<input>
	<form>
		novalidate:阻止表单的默认行为样式
		
	表单验证：
		$valid:有效的表达式 通过：true 失败：false
		$invalid:无效的表达式 验证失败：true 成功：false
		$pristine:原始值未被修改 true 修改过：false
		$dirty:脏值：修改了验证后true 没有修改初始值：false
		$error:验证失败或通过所有的验证信息在这里面 通过：true 不通过false
		注意：
			通过name的方式查找
			配合ng-model
			var m = angular.module('myApp',[]);
			m.controller('Aaa',['$scope',function($scope){
				$scope.text = 'hello';
			}]);
			<div ng-controller="Aaa">
				<form novalidate name="myForm">
					<input type="text" name="myText" ng-model="text" />
					<div>{{myForm.myText.$valid}}</div>
					<div>{{myForm.myText.$invalid}}</div>
					<div>$pristine初始值：{{myForm.myText.$pristine}}</div>
					<div>$dirty初始值：{{myForm.myText.$dirty}}</div>
				</form>
			</div>
			结果：true false true false
			
		input 
			type: email text number url
			required:判断是否为空
			ng-minlength:判断字符的一个最小长度
			ng-maxlength:判断字符的一个最大长度
			ng-pattern:通过正则的方式
			class:
				.ng-valid{}->验证通过
				.ng-invalid{}->验证未通过
				.ng-prisitine{}->是否是初始值
				.ng-dirty{}->初始值已被修改过
		


16：自定义指令：最大特点可以复用
	angular.module->创建一个模块对象
	模块对象下的方法：
		controller：创建控制器
		run：初始化操作
		filter：自定义过滤器
		directive:自定义指令->和控制器没太大关系
			01:restrict:来指定下当前指令的类型  必须是大写
				四种：
					E：标签 ele 标签指令 经常用  <hello></hello> ->一般会重写之前html标签的功能  以一种模版的方式进行交互 模版的替代方式
					A: 属性指令attribute 经常用 <p hello></p> ->一般做的是功能性的 可以复用
					C：class方式 <p class="hello"></p>
					M：注释写法 <!-- directive:hello --> 前提是必须要写上replace
					
					
			02:replace:将模版替换我们当前所写的指令
			03:template:模版 '<div>hello angular</div>'
			04:templateUrl:指定的一个外部模版
			05:scope:true/false 默认false true时独立作用域 不会互相影响
			06:controller->多调用指令中的数据共享。指令和指令进行交互时其可以作为公用的方法，可以在其他指令中被找到，实现指令和指令之间的一些交互
			07:link->用来进行DOM操作的 四个参数->针对当前指令的一个内部实现功能
				scope
				element->最外层的元素
				attr
				reController->带require配置情况下找到指定的指令当中的控制器
			08:transclude->默认false 设置为true后然后采用ng-transclude这个指令可以将嵌套在里面的自定义指令的内容给解读出来
			09:require:
				^+diy指令->向上查找依赖的父级自定义指令
				?+diy指令->在自身上去查找自定义指令 未找到不会报错会出现一个undefined
				?^+diy指令->一起写找父级的指令
			
	m.directive(diyName,function(){
		return {
			restrict:'EACM',//区分大小写并且可以组合使用
			replace:true,
			template:'<div>hello angular</div>',
			templateUrl:''
		}
	});
	

	自定义指令中的scope作用域
		独立作用域true
		隔离作用域{}->不在和外层作用域有任何瓜葛，只在当前标签内部起作用
			@
			=
			&
			自定义指令中一般共享的数据写在自定义指令中的controller中
			针对有差异性的数据处理：采用绑定策略
				@->指的就是一个绑定的普通的字符串
				= ->解析的是数据
				& ->绑定父级函数的一种传递方式
				
			var m = angular.module('myApp',[]);
			m.directive('myTab',function(){
				return {
					restrict:'E',
					replace:true,
					//scope:true,//独立作用域
					scope:{
						myId : '@',
						myName : '=',
						myFn : '&'
					},//->隔离作用域
					controller:['$scope',function($scope){
						//数据是共享的
						$scope.name='miaov';
					}],
					templateUrl:'templateUrlHtml.html'
				}
			});
			m.controller('Aaa',['$scope',function($scope){
				$scope.name = "hello";
				/*$scope.show = function(){
					alert(123);
				}*/
				//传参
				$scope.show = function(n){
					alert(n);
				}
			}]);
			
			属性指令的封装
			attr.myDrag = angular.equals(attr.myDrag,'true');
			
			var m = angular.module('myApp',[]);
			m.directive('myDrag',function(){
				return {
					restrict:'A',
					link:function(scope,element,attr){
						var disX = 0;
						var disY = 0;
						
						//attr得到一个整体的对象
						//console.log(attr);
						//console.log(attr.myDrag) true ->string类型  string->boolean
						//判断两个值是否相等
						attr.myDrag = angular.equals(attr.myDrag,'true');
						//console.log(typeof attr.myDrag)
						
						element.on('mousedown',function(ev){
							var This = this;
							disX = ev.pageX - $(this).offset().left;
							disY = ev.pageY - $(this).offset().top;
						
							if(attr.myDrag){//创建虚线框
								var $line = $('<div>');
								$line.css({width:$(this).outerWidth(),height:$(this).outerHeight(),position:'absolute',left:$(this).offset().left,top:$(this).offset().top,border:'1px dashed gray'});
								$('body').append($line);
							}
						
							$(document).on('mousemove',function(ev){
								if(attr.myDrag){
									$line.css('left',ev.pageX - disX);
									$line.css('top',ev.pageY - disY);
								}else{
									$(This).css('left',ev.pageX - disX);
									$(This).css('top',ev.pageY - disY);
								}
								
							});
							$(document).on('mouseup',function(){
								$(document).off();
								if(attr.myDrag){
									$(This).css('left',$line.offset().left);
									$(This).css('top',$line.offset().top);
									$line.remove();
								}
							});
							return false;
						});
						
					}
				}
			});
			m.controller('Aaa',['$scope',function($scope){}]);
			view:
			<body ng-controller="Aaa">
				<!-- ng-show内部指令可以写一些值 true/false 自定义也可以 -->
				<div id="div1" my-drag="false"></div>
			</body>
			
		tranclude：针对嵌套式的自定义指令，将内部的自定义指令解读出来，需要配合ng-tranclude使用
		var m = angular.module('myApp',[]);
			m.directive('hello',function(){
				return {
					restrict:'E',
					replace:true,
					transclude:true,
					template:'<div>hello angular<h1 ng-transclude></h1></div>'
				}
			});
			m.directive('hi',function(){
				return {
					restrict:'E',
					replace:true,
					template:'<span>hi angular</span>'
				}
			});
			m.controller('Aaa',['$scope',function($scope){
			}]);
			<hello>
				<hi></hi>
			</hello>
			
			require: ^ ? ?^
				当两个自定义指令需要交互的时候，其中一个指令需要获取到另外一个指令中的方法或属性那么需要：
				01：在被获取属性或方法的指令中添加controller以达到数据之间的共享
				controller:function($scope){this.name="miaov",this.show=function(){alert(123)}}
				02:需要获取对方指令下的方法的自定义指令需要添加require方法,并在在link方法中添加一个参数reController
				require:^diyDire->如果两个指令时嵌套关系代表该指令获取其父级指令下的controller中的方法或属性
						?diyDire->代表获取本身下的方法或属性 如果没有不会报错，会提示undefined 算是angular下的一个容错处理
						?^diyDire->常用写法->找父级的指令
					
				例子：
				var m = angular.module('myApp',[]);
				m.directive('hello',function(){
					return {
						restrict:'E',
						replace:true,
						transclude:true,
						controller:function($scope){
							//$scope.name = "maiov";
							this.name="miaov";
						},
						template:'<div>hello angular<h1 ng-transclude></h1></div>'
					}
				});
				m.directive('hi',function(){
					return {
						restrict:'E',
						replace:true,
						require:'?^hello',//依赖的自定义指令 加上^代表要从父级的身上去找这个指令
						template:'<span>hi angular</span>',
						link:function(scope,element,attr,reController){
							console.log(reController);//undefined
					
						}
					}
				});
				m.controller('Aaa',['$scope',function($scope){
				}]);
				<body ng-controller="Aaa">
					<hello>
						<hi></hi>
					</hello>
				</body>
				


17：$http服务
	angularJs的服务
		$scope
			$watch
			$apply
		$rootScope
		$timeout
		$interval
		$filter
		$http->类似于原生中的ajax
			method
			url
			success
			error
			

			var m = angular.module('myApp',[]);
			m.controller('Aaa',['$scope','$http',function($scope,$http){
				/*$http({
					method:'GET',
					url:'data.php'
				}).success(function(data,state,headers,config){
					console.log(data);
				}).error(function(data){
					console.log(data);
				});*/
				$http.get('data.php').success(function(data){
					console.log(data);
				}).error(function(data){
					console.log(data);
				});
			}]);
			
			angular的$http服务当采用jsonp的形式的时候后面的cb参数应该添加JSON_CALLBACK
			例子：百度下拉
			var m = angular.module('myApp',[]);
			m.controller('Aaa',['$scope','$http',function($scope,$http){
				$scope.data = [];
				$scope.change = function(name){
					$http({
						method:'JSONP',
						url:'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='+name+'&cb=JSON_CALLBACK'
					}).success(function(data){
						//console.log(data);
						$scope.data = data.s;
					});	
				}
							
			}]);
			<div ng-controller="Aaa">
				<input type="text" ng-model="name" />
				<input type="button" value="搜索" ng-click="change(name)" />
				<ul>
					<li ng-repeat="d in data">{{d}}</li>
				</ul>
			</div>
			


18：$location服务->对原生的location进行了二次封装
		absUrl()->$location.absUrl()->得到网址信息的绝对地址
		path()
		replace()
		hash()
		search()
		url()
		host()->主机名
		port()
		protocol()


18：$anchorScroll锚点跳转服务
	var m = angular.module('myApp',[]);
	m.controller('Aaa',['$scope','$location','$anchorScroll',function($scope,$location,$anchorScroll){
		$scope.change = function(id){
			//console.log(id)
			$location.hash(id);
			$anchorScroll();
		}
	}]);
	<div id="parent" ng-controller="Aaa">
		<ul>
			<li ng-repeat="id in [1,2,3,4,5]" ng-click="change('div'+id)">{{id}}aaaa</li>
		</ul>
		<div ng-repeat="id in [1,2,3,4,5]" ng-attr-id="div{{id}}">{{id}}</div>
	</div>


18：$cacheFactory->缓存操作的方式
		info()->
		put()->
		get()
		remove()
		配置capacity
		
		var cache = $cacheFactory('myCache');->括号内为缓存的id名字
		cache.info()->查看缓存信息 id size
		cache.put('name','hello')//->添加缓存信息
		cache.get('name')->获取缓存信息 value值hello
		cache.remove('name');->移除缓存信息
		cache.get('name')->undefined
		
		var cache = $cacheFactory('myCache',{capacity:2}); ->第二个参数配置是限制缓存长度
		

19：$log->用于维护和调试 类似于console.log
		log()
		info()
		warn()
		error()
		
		$log.log('hello');//类似于console.log('hello')
		$log.warn('warning');
		$log.error('error');
		$log.info('infos');
		
		
20：$interpolate->插值服务

21：$q服务->异步操作
		promise的实现方式
		defer()
		resolve()->成功时候触发的方法
		reject()->失败时候触发的
		notify()->实时的通知处理
		then()
		
		var dfd = $q.defer();//->创建了一个延迟对象
		
		var m = angular.module('myApp',[]);
		m.controller('Aaa',['$scope','$q',function($scope,$q){
			var dfd = $q.defer();//->创建了一个延迟对象
			function show(){
				setTimeout(function(){
					//dfd.resolve();//成功
					dfd.reject();//失败
				},2000);
				return dfd.promise;//返回一个promise对象
			}
			show().then(function(){
				alert("成功");
			},function(){
				alert("失败");
			});
		}]);


22：angularJs下的供应商：进行服务的相关初始配置操作 ->针对服务的  相关初始配置操作由angularJs供应商完成！如何写呢？写法要写到angular模块下的config方法中
		config
			provider->添加什么服务供应就在config方法下注入一个$服务名字Provider然后后面增加一个回调，将这个新的服务供应商名字注入进去
			$interpolate
				startSymbol() //改变表达式头部的符号
				endSymbol()//改变表达式尾部的符号
			$log
				debugEnabled()
			$anchorScroll
				disableAutoScrolling()
		

		var m = angular.module('myApp',[]);
		m.config(['$interpolateProvider',function($interpolateProvider){
			$interpolateProvider.startSymbol('@@');//改变表达式头部的符号
			$interpolateProvider.endSymbol('@@');//改变表达式尾部的符号
		}]);//引入相应供应商->服务名称+Provider->变成了这个服务的供应商
		m.controller('Aaa',['$scope','$interpolate',function($scope,$interpolate){
			$scope.showText = "hello";
		}]);
		<div ng-controller="Aaa">
			<!--<p>{{showText}}</p>-->
			<p>@@showText@@</p>
		</div>
		


23：自定义服务
	01：自定义服务名字不要带$ 
	02：自定义服务要写到内部服务的后面
	module
		filter()
		directive()
		factory()->自定义服务
		provider()
			$get
		
		var m = angular.module('myApp',[]);
		m.factory('myService',function(){
			return {
				name : 'hello',
				show : function(){
					return this.name + ':angular';
				}
			};
		});
		m.controller('Aaa',['$scope','myService',function($scope,myService){
			console.log(myService.show());
		}]);

	采用factory自定义服务和采用provider自定服务的区别：
		factory:问题在于不能够进行初始化配置，也就是在模块下不能调用config方法然后调用服务所对应的供应商，然后来初始化操作这是不可以的！
		如果自定义服务想进行初始化配置操作的话就得用provider
		
		provider可以在我们的配置的供应商中可以操作
		
	provider：
	var m = angular.module('myApp',[]);
	m.provider('myService',function(){
		return {
			$get : function(){
				return {
					name : 'hello',
					show : function(){
						return this.name + ':angularJs';
					}
				}
			}
		};
	});
	m.controller('Aaa',['$scope','myService',function($scope,myService){
		console.log(myService.show());
	}]);
	
	provider方法扩展上优于factory,支持angular供应商下的服务初始化配置
	var m = angular.module('myApp',[]);
	m.provider('myRandomNum',function(){
		return {
			bolInt : false,
			init : function(argBol){
				if(argBol){
					this.bolInt = true;
				}else{
					this.bolInt = false;
				}
			},
			$get : function(){
				var This = this;
				return function(num1,num2){
					return This.bolInt?Math.round(Math.random()*(num2-num1) + num1):Math.random()*(num2-num1) + num1;
				}
			}
		};
	});
	m.config(['myRandomNumProvider',function(myRandomNumProvider){
		myRandomNumProvider.init(true);
	}]);
	m.controller('Aaa',['$scope','myRandomNum',function($scope,myRandomNum){
		console.log(myRandomNum(-2,3))
	}]);
	

24：模块之间的通信：
		一般封装好一个功能后将其放在一个单独的外部文件中，然后在不同的页面进行一个引用操作！
	var m1 = angular.module('module1',[]);
	m1.factory('myService',function(){
		return {
			name : 'hello',
			show : function(){
				return this.name + ":angularJs";
			}
		}
	});
	var m2 = angular.module('myApp',['module1'])
	m2.controller('Aaa',['$scope','myService',function($scope,myService){
		console.log(myService.show());
	}]);
	


25：angularJs的插件
	ngSanitize->对html进行一个格式化处理，真正解析成html标签
	ngRouter->单页面的跳转的路由方式  类似于html5中的hash值
	使用angularJs插件的时候，angularJs和angular其他版本应该要比较接近，不然会报错
		01:ng-view->和ngRoute配套的 用于切换视图 用于view层
	通过供应商的方式来初始化配置
		02:$routeProvider
			when
				template/templateUrl
				controller
			otherwise({})->配置默认路由
				redirectTo:'/aaa'
	var m = angular.module('myApp',['ngRoute']);
	m.config(['$routeProvider',function($routeProvider){
		$routeProvider
			.when('/aaa',{
				template:'<p>首页的内容</p>'
			})
			.when('/bbb',{
				template:'<p>学员的内容</p>'
			})
			.when('/ccc',{
				template:'<p>课程的内容</p>'
			})
			.otherwise({
				redirectTo : '/aaa'
			});
	}]);
	m.controller('Aaa',['$scope',function($scope){}]);
	<div ng-controller="Aaa">
		<a href="#aaa">首页</a>
		<a href="#bbb">学员</a>
		<a href="#ccc">课程</a>
		<div ng-view></div>
	</div>
	
	当作用域发生改变的时候，可以使用路由下的controller
	
	var m = angular.module('myApp',['ngRoute']);
	m.config(['$routeProvider',function($routeProvider){
		$routeProvider
			.when('/aaa',{
				template:'<p>首页的内容<br/>{{name}}</p>',
				controller:'Aaa'
			})
			.when('/bbb',{
				template:'<p>学员的内容<br/>{{name}}</p>',
				controller:'Bbb'
			})
			.when('/ccc',{
				template:'<p>课程的内容<br/>{{name}}</p>',
				controller:'Ccc'
			})
			.otherwise({
				redirectTo : '/aaa'
			});
	}]);
	m.controller('Aaa',['$scope',function($scope){
		$scope.name = 'hello';
	}]);
	m.controller('Bbb',['$scope',function($scope){
		$scope.name = 'hi';
	}]);
	m.controller('Ccc',['$scope',function($scope){
		$scope.name = '你好';
	}]);


26：angularJs的事件内部传播方式
		$emit->向上传播方式 类似于冒泡机制
		$broadcast->广播方式 类似与事件中的捕获方式
		event
			targetScope
			currentScope
			name
			stropPropagation()
		内部传播方式：
			$routerChangeStart
			$viewContentLoaded


27：ngAnimate插件
		css3的方式
			ng-enter->进入运动的过程
			ng-enter-active
			ng-leave
			ng-leave-active
		支持的指令：
			if view repeat include switch
			repeat
				ng-enter-stagger{animation-delay}->按照一定的顺序进行淡入淡出
			
			ng-hide-add
			ng-hide-add-active
			ng-hide-remove
			ng-hide-remove-active
			支持的指令：
				class show hide model
			
		js的方式
			aniamtion()
				ng-if:enter/leave
				ng-show:removeClass/addClass
		
		ng-if:		
		var m = angular.module('myApp',['ngAnimate']);
		//m.animation('控制运动的class',回调);
		m.animation('.box',function(){
			return {
				leave : function(element,done){
					//console.log(element);
					//console.log(done);->done来执行ng-if的这个指令
					$(element).animate({width:0,height:0},1000,done);
				},
				enter : function(element,done){
				$(element).css({
					width:0,
					height:0
				});
					$(element).animate({width:100,height:100},1000,done);
				}
			};
		});
		m.controller('Aaa',['$scope',function($scope){
			$scope.bBtn = true;
		}]);
		<div ng-controller="Aaa">
			<input type="checkbox" ng-model="bBtn" />
			<div ng-if="bBtn" class="box"></div>
		</div>
			
		ng-show:
		var m = angular.module('myApp',['ngAnimate']);
		//m.animation('控制运动的class',回调);
		m.animation('.box',function(){
			return {
				addClass : function(element,sClass,done){
					//console.log(element);
					//console.log(sClass);
					//console.log(done);
					$(element).animate({width:0,height:0},1000,done);
				},
				removeClass : function(element,sClass,done){
				$(element).css({
					width:0,
					height:0
				});
					$(element).animate({width:100,height:100},1000,done);
				}
			};
		});
		<div ng-controller="Aaa">
			<input type="checkbox" ng-model="bBtn" />
			<div ng-show="bBtn" class="box"></div>
		</div>
		

27：ngResource插件->类似于$http服务但是比http服务复杂，只要针对一些交互上比较大，前后端数据比较大的
		支持RESTful架构模式
		get:
			get()
			query()->获取成组的json对象
		post:
			save()
		delete()
		
		
		var objRe = $resource('zhangsan.json');//请求
	



28:angularJs架构
	phonecat实例